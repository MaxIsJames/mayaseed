# Copyright (c) 2012 Jonathan Topf

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import ms_commands

# ms_export_translate() contains the definitions of the appleseed XML scene entities, it also contains the code for translating the maya object heirarchy into the appleseed object heirarchy

#****************************************************************************************************************************************************************************************************
# utilitiy functions & classes **********************************************************************************************************************************************************************
#****************************************************************************************************************************************************************************************************

# OutXML *****************************************************************************************************************************************************************************************

class XMLObject():
spaces_per_indentation_level = 4    
    def __init__(self, file_path):
        self.file_path = file_path
        self.indentation_level = 0
        self.file_object = None
        try:
            self.file_object = open(self.file_path, 'w') #open file for editing

        except IOError:
            cmds.error('IO error: file not accesable')
            raise RuntimeError('IO error: file not accesable')
            return

        self.appendElement('?xml version="1.0" encoding="UTF-8"?')
        self.appendElement('!-- File generated by mayaseed version 0.1.7 --')
        
    def appendLine(self, str):
        self.file_object.write(((self.indentation_level * self.spaces_per_indentation_level) * ' ') + str + '\n')
     
     def startElement(self,str):
     	print 'writing ', str
     	self.appendLine('<' + str + '>')
        self.indentation_level += 1
        
    def endElement(self, str):
        self.indentation_level -= 1
        self.appendLine('</' + str + '>')
        
    def appendElement(self, str):
        self.appendLine('<' + str + '>')

    def appendParameter(self, name, value):
    	self.appendElement('parameter name"{0}" value="{1}"'.format(name, value))

    def close(self):
        self.file_object.close() #close file

#****************************************************************************************************************************************************************************************************
# appleseed As classes ******************************************************************************************************************************************************************************
#****************************************************************************************************************************************************************************************************

# AsProject *****************************************************************************************************************************************************************************************

class AsProject():

	def __init__(self, params, maya_scene):
		self.params = params
		self.scene = AsScene()
		self.output = AsOutput()
		self.configurations = AsConfigurations()

	def emitXML(self, doc):

		doc.startElement('project')
		self.scene.emit_XML(doc)
		self.output.emit_XML(doc)
		self.configurations.emit_XML(doc)
		doc.endElement('project')
		

# AsScene *******************************************************************************************************************************************************************************************

class AsScene(object):

	def __init__(self, params, maya_scene):

		self.params = params
		self.environment_list = []
		self.environment_edf_list = []
		self.environment_shader_list = []
		self.assembly_list = []
		self.color_objects = []
		self.texture_objects = []
		self.camera = AsCamera(self, maya_scene['camera'], self.params)

	

	# the following methods handle the adding of new textures/colors/environments/environment_edfs and checking their uniqueness
	# any child object of the scene will be passed the scene object so it can instantiate one of the above objects into a list and return a reference to it


	def addEnvironment(self, maya_environment):
		return self.addToList(maya_environment, self.environment_list, AsEnvironment)

	def addEnvironmentEdf(self, maya_environment):
		# check for uniquieness 
		for object in self.environment_edf_list:
			if object.name == (maya_object.safe_name + '_edf'):
				# return object from list if there is one with the same name still exists
				return object
		# otherwise return a new AsColor
		new_object = AsEnvironmentEdf(self, self.params, maya_environment, self)
		self.environment_edf_list.append(new_object)
		return new_object

	def addColor(self, maya_color):
		return self.addToList(maya_color, self.color_objects, AsColor)

	def addTexture(self, maya_texture_object):
		return self.addToList(maya_texture_object, self.texture_objects, AsTexture)

	def addAsObjectToList(self, maya_object, list, class_type):
		# check for uniquieness 
		for object in list:
			if object.name == maya_object.safe_name:
				# return object from list if there is one with the same name still exists
				return object
		# otherwise return a new AsColor
		new_object = class_type(self, self.params, maya_object, self)
		list.append(new_object)
		return new_object


	def emitXML(self, doc):
		
		doc.startElement('scene')

		self.camera.emitXML(doc)

		for texture in self.texture_objects:
			texture.emitXML(doc)

		for color in self.color_objects:
			color.emitXML(doc)

		for environment_edf in self.environment_edf_list:
			environment_edf.emitXML(doc)

		for environment_shader in self.environment_shader_list:
			environment_shader.emitXML(doc)

		for environment in self.environment_list:
			environment.emitXML(doc)

		for assembly in self.assembly_list:
			assembly.emitXML(doc)

		doc.endElement('scene')
		

# AsCamera ******************************************************************************************************************************************************************************************

class AsCamera():

	def __init__(self, params, maya_camera_object):

		self.params = params
		if self.params['sceneCameraDefaultThinLens'] or maya_camera_object.dof:
            self.model = 'thinlens_camera'
            self.f_stop = maya_camera_object.fstop
            self.focal_distance = maya_camera_object.focal_distance
            self.diaphragm_blades = 0
            self.diaphragm_tilt_angle = 0.0
        else: 
        	self.model = 'pinhole_camera'

        self.film_width = maya_camera_object.film_width
        self.film_height = maya_camera_object.film_height
		self.focal_length = maya_camera_object.focal_length
		self.transform = AsTransform(self.params, False, maya_camera_object.matrix)

# AsTransform ***************************************************************************************************************************************************************************************

class AsTransform():

	def __init__(self, params, maya_transform_object=False, matrix=False):

		self.params = params
		self.pre_scale = self.params['scene_scale']
		if matrix:
			self.matrix = matrix
		elif maya_transform_object:
			self.matrix = maya_transform_object.matrix
		else:
			self.matrix = [ [1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1] ]

	def emitXML(self, doc):

		samples = len(self.matrix)
		increment = 1 / samples

		for i in len(self.matrix):
			doc.startElement('transform time="{0:03}"'.format(i * increment))
			doc.appendElement('scaling value="{0}"'.format(self.pre_scale))
			doc.startElement('matrix')

            doc.appendLine('{0:.15f} {1:.15f} {2:.15f} {3:.15f}'.format(self.matrix[i][0], self.matrix[i][4], self.matrix[i][8] , self.matrix[i][12]))
            doc.appendLine('{0:.15f} {1:.15f} {2:.15f} {3:.15f}'.format(self.matrix[i][1], self.matrix[i][5], self.matrix[i][9] , self.matrix[i][13]))
            doc.appendLine('{0:.15f} {1:.15f} {2:.15f} {3:.15f}'.format(self.matrix[i][2], self.matrix[i][6], self.matrix[i][10], self.matrix[i][14]))
            doc.appendLine('{0:.15f} {1:.15f} {2:.15f} {3:.15f}'.format(self.matrix[i][3], self.matrix[i][7], self.matrix[i][11], self.matrix[i][15]) )   

			doc.endElement('matrix')

# AsTexture *****************************************************************************************************************************************************************************************

class AsTexture():

	def __init__(self, params, maya_texture_object, parent):

		self.params = params
		self.name = maya_texture_object.safe_name
		self.color_space = 'sRGB'
		self.file_name = maya_texture_object.texture_path

	def emitXML(self, doc):

        doc.startElement('texture name="{0}" model="disk_texture_2d"'.format(self.safe_name))
        doc.appendParameter('color_space',self.color_space)
        doc.appendParameter('filename',self.file_name)
        doc.endElement('texture')
	
# AsTextureInstance *********************************************************************************************************************************************************************************	

class AsTextureInstance():

	def __init__(self, params, AsTexture, name=False):

		self.params = params
		self.parent = AsTexture
		if name:
			self.name = name
		else: 
			self.name = (self.parent.name + '_inst')
		self.addressing_mode = 'clamp'
		self.filtering_mode = 'bilinear'

	def emitXML(self, doc):

		doc.startElement('texture_instance name="{0}" texture="{1}"'.format(self.name, self.parent.name))
        doc.appendParameter('addressing_mode', 'clamp')
        doc.appendParameter('filtering_mode', 'bilinear')
		doc.endElement('texture_instance')

# AsEnvironment *************************************************************************************************************************************************************************************

class AsEnvironment():

	def __init__(self, params, maya_environment, parent):

		self.params = params
		self.name = maya_environment.safe_name
		self.edf = parent.addEnvironmentEdf(maya_environment)

	def emitXML(self, doc):

		doc.startElement('environment name="{0}" model="generic_environment"'.format(self.name))
		doc.appendParameter('environment_edf', self.edf.name)
		doc.endElement('environment')


# AsEnvironmentEdf **********************************************************************************************************************************************************************************

class AsEnvironmentEdf():

	def __init__(self, params, maya_environment, parent):

		self.params = params
		self.model = maya_environment.model
		self.name = maya_environment.safe_name + '_edf'
		self.edf_params = dict()

		if self.model == 'constant_environment_edf':
			self.edf_params['exitance'] =  parent.addColor(maya_environment.constant_exitance)

		elif self.model == 'gradient_environment_edf':
			self.edf_params['horizon_exitance'] = parent.addColor(maya_environment.gradient_horizon_exitance)
			self.edf_params['zenith_exitance'] =  parent.addColor(maya_environment.gradient_zenith_exitance)  

		elif self.model == 'latlong_map_environment_edf':
			self.edf_params['exitance'] = parent.addTexture(maya_environment.latitude_longitude_exitance)
			self.edf_params['horizontal_shift'] = 0
			self.edf_params['vertical_shift'] = 0

		elif self.model == 'mirrorball_map_environment_edf':
			self.edf_params['exitance'] = parent.addTexture(maya_environment.mirror_ball_exitance)

	def emitXML(self, doc):

        doc.startElement('environment_edf name="{0}" model="{1}"'.format(self.name, self.model))
        for param in self.edf_params:
            doc.appendParameter(param, self.edf_params[param].name)
        doc.endElement('environment_edf')


# AsEnvironmentShader *******************************************************************************************************************************************************************************

# leaving this out for now

# AsColor *******************************************************************************************************************************************************************************************

class AsColor():

	def __init__(self, params, maya_color, parent):

		self.name = maya_color.name
		normalised_color = ms_commands.normalizeRGB(maya_color.color)
		self.RGB_color = normalised_color[:3]
		self.multiplier = normalised_color[3]
        self.wavelength_range = '400.0 700.0'
        self.alpha = 1.0

    def emitXML(self, doc):

        doc.startElement('color name="{0}"'.format(self.name))       
        doc.appendParameter('color', '{0:.6f} {1:.6f} {2:.6f}'.format(self.RGB_color[0], self.RGB_color[1], self.RGB_color[2]))
        doc.appendParameter('color_space', self.color_space)
        doc.appendParameter('multiplier', self.multiplier)
        doc.appendParameter('alpha', self.alpha)

        doc.startElement('values')
        doc.appendLine('{0:.6f} {1:.6f} {2:.6f}'.format(self.RGB_color[0], self.RGB_color[1], self.RGB_color[2]))
        doc.endElement('values')
        doc.startElement('alpha')
        doc.appendLine('{0:.6f}'.format(self.alpha))
        doc.endElement('alpha')
        doc.endElement('color')


# AsAssembly ****************************************************************************************************************************************************************************************

class AsAssembly():

	def __init__(self, params, maya_transform, root=False):

		self.params = params
		self.name = maya_transform.safe_name
		self.child_assemblies = []
		self.child_assembly_instances = []
		self.geometry = []
		self.geometry_instances = []
		self.lights = []
		self.materials = []
		self.bsdfs = []
		self.edfs = []
		self.surface_shaders = []
		self.colors = []
		self.tetures = []
		self.texture_instances = []

		# if there is no root set then this must be a root
		# set the root to self so that child assemblies see this as root
		if not root:
			self.root = self

		# create a child assembly for each transform
		for child_maya_transform in maya_transform.child_transforms:
			self.child_assemblies.append(AsAssembly(self.params, child_maya_transform, self.parent))


	def addGeometry(self, maya_geometery):
		return self.addToList(maya_geometery, self.geometry, AsGeometry)

	def addLights(self, maya_light):
		return self.addToList(maya_light, self.lights, AsLight)

	def addMaterial(self, maya_ms_material):
		return self.addToList(maya_ms_material, self.materials, AsMaterial)

	def addBsdf(self, maya_ms_shading_node):
		return self.addToList(maya_ms_shading_node, self.bsdfs, AsBsdf)

	def addEdf(self, maya_ms_shading_node):
		return self.addToList(maya_ms_shading_node, self.edfs, AsEdf)

	def addSurfaceShader(self, maya_ms_shading_node):
		return self.addToList(maya_ms_shading_node, self.surface_shaders, AsSurfaceShader)

	def addColor(self, maya_color):
		return self.addToList

	def addAsObjectToList(self, maya_object, list, class_type):
		# check for uniquieness 
		for object in list:
			if object.name == maya_object.safe_name:
				# return object from list if there is one with the same name still exists
				return object
		# otherwise return a new AsColor
		new_object = class_type(self, self.params, maya_object, self)
		list.append(new_object)
		return new_object

	def emitXML(self, doc):

		doc.startElement('assembly name="{0}"'.format(self.name))
		doc.endElement('assembly')

# AsAssemblyInstance ********************************************************************************************************************************************************************************

class AsAssemblyInstance():

	def __init__(self, params, AsAssembly, name=False):

		self.params = params
		self.parent = AsAssembly
		if name:
			self.name = name
		else: 
			self.name = (self.parent.name + '_inst')

		self.transform = AsTransform(self.transform, maya_transform)





	def emitXML(self, doc):

		doc.startElement('assembly_instance name="{0}_inst"'.format(self.name))
		doc.endElement('assembly_instance')

# AsMaterial ****************************************************************************************************************************************************************************************

# AsGeometry ****************************************************************************************************************************************************************************************

# AsLight *******************************************************************************************************************************************************************************************

# AsBsdf ********************************************************************************************************************************************************************************************

# AsEdf *********************************************************************************************************************************************************************************************

# AsSurfaceShader ***********************************************************************************************************************************************************************************

# AsOutput ******************************************************************************************************************************************************************************************

class AsOutput():
    def __init__(self, params):
        self.params = params
    def emitXML(self, doc):
        doc.startElement('output')
        doc.startElement('frame name="beauty"')
        doc.appendParameter('camera', self.params['outputCamera'])
        doc.appendParameter('color_space', self.params['outputColorSpace'])
        doc.appendParameter('resolution', '{0} {1}'.format(self.params['outputResWidth'], self.params['outputResHeight']))
        doc.endElement('frame')
        doc.endElement('output')

# AsConfigurations **********************************************************************************************************************************************************************************

class AsConfigurations():

	def __init__(self, params):
		self.params = params

	def emitXML(self, doc):

		doc.startElement('configurations')

		# add default interactive config
		doc.appendElement('configuration name="interactive" base="base_interactive"')

		# only export custom intercative config if you're told to
		if not self.params['customFinalConfigCheck']:

			doc.appendElement('configuration name="final" base="base_final"')

		else:

            doc.startElement('configuration name="final" base="base_final"')

            engine = ''
            if self.params['customFinalConfigEngine'] == "Path Tracing":
                engine = 'pt'
            else:
                engine = 'drt'
            doc.appendParameter('lighting_engine', engine)
            doc.appendParameter('min_samples', self.params['customFinalConfigMaxSamples'])
            doc.appendParameter('max_samples', self.params['customFinalConfigMaxSamples'])
            
            doc.startElement('parameters name="drt"')
            doc.appendParameter('dl_bsdf_samples', self.params['drtDLBSDFSamples'])
            doc.appendParameter('dl_light_samples', self.params['drtDLLightSamples'])
            doc.appendParameter('enable_ibl', self.params['drtEnableIBL'])
            doc.appendParameter('ibl_bsdf_samples', self.params['drtIBLBSDFSamples'])
            doc.appendParameter('ibl_env_samples', self.params['drtIBLEnvSamples'])
            doc.appendParameter('max_path_length', self.params['drtMaxPathLength'])
            doc.appendParameter('rr_min_path_length', self.params['drtRRMinPathLength'])
            doc.endElement("parameters")

            doc.startElement('parameters name="pt"')
            doc.appendParameter('dl_light_samples', self.params['ptDLLightSamples'])

            if self.params['ptEnableCaustics']:
                doc.appendParameter('enable_caustics', 'true')
            else:
                doc.appendParameter('enable_caustics', 'false')

            if self.params['ptEnableDL']:
                doc.appendParameter('enable_dl', 'true')
            else:
                doc.appendParameter('enable_dl', 'false')

            if self.params['ptEnableIBL']:
                doc.appendParameter('enable_ibl', 'true')
            else:
                doc.appendParameter('enable_ibl', 'false')

            doc.appendParameter('ibl_bsdf_samples', self.params['ptIBLBSDFSamples'])
            doc.appendParameter('ibl_env_samples', self.params['ptIBLEnvSamples'])
            doc.appendParameter('max_path_length', self.params['ptMaxPathLength'])

            if self.params['ptNextEventEstimation']:
                doc.appendParameter('next_event_estimation', 'true')
            else:
                doc.appendParameter('next_event_estimation', 'false')

            doc.appendParameter('rr_min_path_length', self.params['ptRRMinPathLength'])
            doc.endElement("parameters")

            doc.startElement('parameters name="generic_tile_renderer"')
            doc.appendParameter('filter_size', self.params['gtrFilterSize'])
            doc.appendParameter('max_contrast', self.params['gtrMaxContrast'])
            doc.appendParameter('max_samples', self.params['gtrMaxSamples'])
            doc.appendParameter('max_variation', self.params['gtrMaxVariation'])
            doc.appendParameter('min_samples', self.params['gtrMinSamples'])
            doc.appendParameter('sampler', self.params['gtrSampler'])
            doc.endElement('parameters')

		doc.endElement('configurations')


#****************************************************************************************************************************************************************************************************
# translate() function ******************************************************************************************************************************************************************************
#****************************************************************************************************************************************************************************************************





