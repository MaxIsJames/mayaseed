# Copyright (c) 2012 Jonathan Topf

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# ms_export_translate() contains the definitions of the appleseed XML scene entities, it also contains the code for translating the maya object heirarchy into the appleseed object heirarchy

#****************************************************************************************************************************************************************************************************
# utilitiy functions & classes **********************************************************************************************************************************************************************
#****************************************************************************************************************************************************************************************************

# OutXML *****************************************************************************************************************************************************************************************

class XMLObject():
spaces_per_indentation_level = 4    
    def __init__(self, f_path):
        self.file_path = f_path
        self.indentation_level = 0
        self.file_object = None
        try:
            self.file_object = open(self.file_path, 'w') #open file for editing

        except IOError:
            cmds.error('IO error: file not accesable')
            raise RuntimeError('IO error: file not accesable')
            return

        self.appendElement('?xml version="1.0" encoding="UTF-8"?')
        self.appendElement('!-- File generated by mayaseed version 0.1.7 --')
        
    def appendLine(self, str):
        self.file_object.write(((self.indentation_level * self.spaces_per_indentation_level) * ' ') + str + '\n')
     
     def startElement(self,str):
     	print 'writing ', str
     	self.appendLine('<' + str + '>')
        self.indentation_level += 1
        
    def endElement(self, str):
        self.indentation_level -= 1
        self.appendLine('</' + str + '>')
        
    def appendElement(self, str):
        self.appendLine('<' + str + '>')

    def appendParameter(self, name, value):
    	self.appendElement('parameter name"{0}" value="{1}"'.format(name, value))

    def close(self):
        self.file_object.close() #close file

#****************************************************************************************************************************************************************************************************
# appleseed As classes ******************************************************************************************************************************************************************************
#****************************************************************************************************************************************************************************************************

# AsProject *****************************************************************************************************************************************************************************************

class AsProject():

	def __init__(self, maya_scene, params):
		self.params = params
		self.scene = AsScene()
		self.output = AsOutput()
		self.configurations = AsConfigurations()

	def emitXML(self, doc):

		doc.startElement('project')
		self.scene.emit_XML(doc)
		self.output.emit_XML(doc)
		self.configurations.emit_XML(doc)
		doc.endElement('project')
		

# AsScene *******************************************************************************************************************************************************************************************

class AsScene(object):

	def __init__(self, maya_scene, params):

		self.params = params
		self.environment_list = []
		self.environment_edf_list = []
		self.environment_shader_list = []
		self.assembly_list = []
		self.color_objects = []
		self.texture_objects = []
		self.camera = AsCamera(self, maya_scene, self.params)

	def emitXML(self, doc):
		
		doc.startElement('scene')

		self.camera.emitXML(doc)

		for texture in self.texture_objects:
			texture.emitXML(doc)

		for color in self.color_objects:
			color.emitXML(doc)

		for environment_edf in self.environment_edf_list:
			environment_edf.emitXML(doc)

		for environment_shader in self.environment_shader_list:
			environment_shader.emitXML(doc)

		for environment in self.environment_list:
			environment.emitXML(doc)

		for assembly in self.assembly_list:
			assembly.emitXML(doc)

		doc.endElement('scene')
		


# AsCamera ******************************************************************************************************************************************************************************************

class AsCamera():

	def __init__(self, maya_scene, params):

		self.params = params

# AsTransform ***************************************************************************************************************************************************************************************

# AsTexture *****************************************************************************************************************************************************************************************

# AsEnvironment *************************************************************************************************************************************************************************************

# AsEnvironmentEdf **********************************************************************************************************************************************************************************

# AsEnvironmentShader *******************************************************************************************************************************************************************************

# AsColor *******************************************************************************************************************************************************************************************

# AsEnvironment *************************************************************************************************************************************************************************************

# AsAssembly ****************************************************************************************************************************************************************************************

# AsMaterial ****************************************************************************************************************************************************************************************

# AsObject ******************************************************************************************************************************************************************************************

# AsBsdf ********************************************************************************************************************************************************************************************

# AsEdf *********************************************************************************************************************************************************************************************

# AsSurfaceShader ***********************************************************************************************************************************************************************************

# AsOutput ******************************************************************************************************************************************************************************************

class AsOutput():
    def __init__(self, maya_scene, params):
        self.params = params
    def emitXML(self, doc):
        doc.startElement('output')
        doc.startElement('frame name="beauty"')
        doc.appendParameter('camera', self.params['outputCamera'])
        doc.appendParameter('color_space', self.params['outputColorSpace'])
        doc.appendParameter('resolution', '{0} {1}'.format(self.params['outputResWidth'], self.params['outputResHeight']))
        doc.endElement('frame')
        doc.endElement('output')

# AsConfigurations **********************************************************************************************************************************************************************************

class AsConfigurations():

	def __init__(self, maya_scene, params):
		pass

	def emitXML(self, doc):

		doc.startElement('configurations')

		# add default interactive config
		doc.appendElement('configuration name="interactive" base="base_interactive"')

		# only export custom intercative config if you're told to
		if not self.params['customFinalConfigCheck']:

			doc.appendElement('configuration name="final" base="base_final"')

		else:

            doc.startElement('configuration name="final" base="base_final"')

            engine = ''
            if self.params['customFinalConfigEngine'] == "Path Tracing":
                engine = 'pt'
            else:
                engine = 'drt'
            doc.appendParameter('lighting_engine', engine)
            doc.appendParameter('min_samples', self.params['customFinalConfigMaxSamples'])
            doc.appendParameter('max_samples', self.params['customFinalConfigMaxSamples'])
            
            doc.startElement('parameters name="drt"')
            doc.appendParameter('dl_bsdf_samples', self.params['drtDLBSDFSamples'])
            doc.appendParameter('dl_light_samples', self.params['drtDLLightSamples'])
            doc.appendParameter('enable_ibl', self.params['drtEnableIBL'])
            doc.appendParameter('ibl_bsdf_samples', self.params['drtIBLBSDFSamples'])
            doc.appendParameter('ibl_env_samples', self.params['drtIBLEnvSamples'])
            doc.appendParameter('max_path_length', self.params['drtMaxPathLength'])
            doc.appendParameter('rr_min_path_length', self.params['drtRRMinPathLength'])
            doc.endElement("parameters")

            doc.startElement('parameters name="pt"')
            doc.appendParameter('dl_light_samples', self.params['ptDLLightSamples'])

            if self.params['ptEnableCaustics']:
                doc.appendParameter('enable_caustics', 'true')
            else:
                doc.appendParameter('enable_caustics', 'false')

            if self.params['ptEnableDL']:
                doc.appendParameter('enable_dl', 'true')
            else:
                doc.appendParameter('enable_dl', 'false')

            if self.params['ptEnableIBL']:
                doc.appendParameter('enable_ibl', 'true')
            else:
                doc.appendParameter('enable_ibl', 'false')

            doc.appendParameter('ibl_bsdf_samples', self.params['ptIBLBSDFSamples'])
            doc.appendParameter('ibl_env_samples', self.params['ptIBLEnvSamples'])
            doc.appendParameter('max_path_length', self.params['ptMaxPathLength'])

            if self.params['ptNextEventEstimation']:
                doc.appendParameter('next_event_estimation', 'true')
            else:
                doc.appendParameter('next_event_estimation', 'false')

            doc.appendParameter('rr_min_path_length', self.params['ptRRMinPathLength'])
            doc.endElement("parameters")

            doc.startElement('parameters name="generic_tile_renderer"')
            doc.appendParameter('filter_size', self.params['gtrFilterSize'])
            doc.appendParameter('max_contrast', self.params['gtrMaxContrast'])
            doc.appendParameter('max_samples', self.params['gtrMaxSamples'])
            doc.appendParameter('max_variation', self.params['gtrMaxVariation'])
            doc.appendParameter('min_samples', self.params['gtrMinSamples'])
            doc.appendParameter('sampler', self.params['gtrSampler'])
            doc.endElement('parameters')

		doc.endElement('configurations')




#****************************************************************************************************************************************************************************************************
# translate() function ******************************************************************************************************************************************************************************
#****************************************************************************************************************************************************************************************************





