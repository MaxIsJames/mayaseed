import maya.cmds as cmds
import maya.OpenMaya as OpenMaya
import ms_commands

SCRIPT_VERSION = '0.1.1'

def writeObj(object_name, file_path):

    #open file for writing
    try:
        file_object = open(file_path, 'w') #open file for editing

    except IOError:
        cmds.error('IO error: file not accesable')
        raise RuntimeError('IO error: file not accesable')
        return
    
    #write file info
    file_object.write('# File generated by ms_obj_xport.py version:{0} from mayaseed version:{1}\n'.format(SCRIPT_VERSION,ms_commands.MAYASEED_VERSION))
    file_object.write('# {0}\n\n'.format(object_name))


    
    sel = OpenMaya.MSelectionList()
    sel.add(str(object_name))
    mesh_dag_path = OpenMaya.MDagPath() #create dag path object
    sel.getDagPath(0,mesh_dag_path)     #retreive dag path of object
    
    mesh = OpenMaya.MFnMesh(mesh_dag_path) #create mesh object
    iter_polys = OpenMaya.MItMeshPolygon( mesh.object() ) #create iter object


    
    transform_space_enum = 2 #2 = object_space

    #cerate point array to hold the points from the mesh
    point_array = OpenMaya.MPointArray() 
    mesh.getPoints(point_array)
    #write the points to disk
    i=0
    while i < point_array.length():
        file_object.write('v {0:.15f} {1:.15f} {2:.15f}\n'.format(point_array[i].x, point_array[i].y, point_array[i].z))
        i += 1

    file_object.write('\n')
    
    #create MFloatArray for u's and v's to store values
    u_array = OpenMaya.MFloatArray()
    v_array = OpenMaya.MFloatArray()
    mesh.getUVs(u_array, v_array)
    #write u's and v's to disk
    i=0
    while i < u_array.length():
        file_object.write('vt {0:.15f} {1:.15f}\n'.format(u_array[i], v_array[i]))
        i +=1

    file_object.write('\n')

    normal_array = OpenMaya.MFloatVectorArray()
    mesh.getNormals(normal_array, transform_space_enum)
    #write normals to disk
    i = 0
    while i < normal_array.length():
        file_object.write('vn {0:.15f} {1:.15f} {2:.15f}\n'.format(normal_array[i].x, normal_array[i].y, normal_array[i].z))
        i += 1

    file_object.write('\n')

    #itterate over polys
    while not iter_polys.isDone():

        #start face definition
        file_object.write('f ')

        i=0
        while i < iter_polys.polygonVertexCount():
            
            #to get uv index we need to create an int pointer because the api is just wrappers for c++
            util = OpenMaya.MScriptUtil()
            util.createFromInt(0)
            uv_pInt = util.asIntPtr()
            uv_index = OpenMaya.MScriptUtil()
            uv_index.createFromInt(0)
            iter_polys.getUVIndex(i, uv_pInt)

            
            file_object.write('{0}/{1}/{2} '.format(iter_polys.vertexIndex(i) + 1, uv_index.getInt(uv_pInt) + 1, iter_polys.normalIndex(i) + 1))

            i += 1

        #next could just write individual polys like this, but would be good if you could weed out shared verts
        file_object.write('\n')
        iter_polys.next()


        
    file_object.close()
    print 'finished exporting', object_name

















