
//
// Copyright (c) 2012 Jonathan Topf
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#if defined __APPLE__
    #include <maya/OpenMayaMac.h>
#endif

#include <maya/MIOStream.h>
#include <maya/MSimple.h>
#include <maya/MGlobal.h>
#include <maya/MSelectionList.h>
#include <maya/MDagPath.h>
#include <maya/MSelectionList.h>
#include <maya/MFnMesh.h>
#include <maya/MItMeshPolygon.h>
#include <maya/MPointArray.h>
#include <maya/MFloatArray.h>
#include <maya/MFloatVectorArray.h>
#include <maya/MArgList.h>
#include <maya/MString.h>
#include <fstream>

#if defined _WIN32
    #if defined ms_export_obj_EXPORTS
        #define DLLSYMBOL __declspec(dllexport)
    #else
        #define DLLSYMBOL __declspec(dllimport)
    #endif
#else
    #define DLLSYMBOL
#endif

const MString Version("0.1.1");

DLLSYMBOL MStatus initializePlugin(MObject _obj);
DLLSYMBOL MStatus uninitializePlugin(MObject _obj);

DeclareSimpleCommand(ms_export_obj, "mayaseed", Version.asChar());

MStatus ms_export_obj::doIt(const MArgList& args)
{
    // Retrieve the arguments.
    MString mesh_name;
    MString file_path;
    for (unsigned int i = 0; i < args.length(); i++)
    {
        if (args.asString(i) == "-mesh")
            mesh_name = args.asString(i + 1);
        else if (args.asString(i) == "-filePath")
            file_path = args.asString(i + 1);
    }

    MString display_info;
    display_info.format("Exporting ^1s using ms_export_obj", mesh_name);
    MGlobal::displayInfo(display_info);

    MSelectionList sel;
    sel.add(mesh_name);
    MDagPath mesh_dag_path;
    sel.getDagPath(0, mesh_dag_path);

    MFnMesh mesh(mesh_dag_path);
    MItMeshPolygon iter_polys(mesh.object());

    // Open file for writing, overwriting previous contents.
    std::ofstream out_file;
    out_file.open(file_path.asChar(), ios::trunc);
    out_file << "# File generated by ms_export_obj version " << Version.asChar() << "\n\n";

    // Write vertices.
    MPointArray point_array;
    mesh.getPoints(point_array);
    for (unsigned int i = 0; i < point_array.length(); i++)
    {
        const MPoint& p = point_array[i];
        out_file << "v " << p.x << " " << p.y << " " << p.z << "\n";
    }

    // Write UVs.
    MFloatArray u_array;
    MFloatArray v_array;
    mesh.getUVs(u_array, v_array);
    for (unsigned int i = 0; i < u_array.length(); i++)
    {
        out_file << "vt " << u_array[i] << " " << v_array[i] << "\n";
    }

    // Write normals.
    MFloatVectorArray normal_array;
    mesh.getNormals(normal_array, MSpace::kTransform);
    for (unsigned int i = 0; i < normal_array.length(); i++)
    {
        const MFloatVector& n = normal_array[i];
        out_file << "vn " << n.x << " " << n.y <<  " " << n.z << "\n";
    }

    // Write polys.
    while (!iter_polys.isDone())
    {
        out_file << "f ";

        unsigned int vert_count = iter_polys.polygonVertexCount();
        for (unsigned int i = 0; i < vert_count; i++)
        {
            int uv_index;
            iter_polys.getUVIndex(i, uv_index);
            out_file << (iter_polys.vertexIndex(i) + 1) << "/" << (uv_index + 1) << "/" << (iter_polys.normalIndex(i) + 1) << " ";
        }

        out_file << "\n";

        iter_polys.next();
    }

    out_file.close();

    return MS::kSuccess;
}
