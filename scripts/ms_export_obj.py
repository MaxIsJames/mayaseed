
#
# Copyright (c) 2012 Jonathan Topf
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


import maya.cmds as cmds
import maya.OpenMaya as OpenMaya
import ms_commands
import os

SCRIPT_VERSION = '0.1.3'

def export(object_name, file_path, overwrite=True):
    if os.path.exists(file_path) and not overwrite:
        return

    export_dir = os.path.split(file_path)[0]

    if not os.path.exists(export_dir):
        os.makedirs(export_dir)
        
    try:
        file_object = open(file_path, 'w')
    except IOError:
        error_msg = "IO error: failed to open {0} for writing.".format(file_path)
        cmds.error(error_msg)
        raise RuntimeError(error_msg)

    file_object.write("# File generated by ms_export_obj.py version {0}\n".format(SCRIPT_VERSION))

    sel = OpenMaya.MSelectionList()
    sel.add(str(object_name))

    mesh_dag_path = OpenMaya.MDagPath()
    sel.getDagPath(0, mesh_dag_path)
    
    mesh = OpenMaya.MFnMesh(mesh_dag_path)
    iter_polys = OpenMaya.MItMeshPolygon(mesh.object())

    # Write vertices.
    point_array = OpenMaya.MPointArray() 
    mesh.getPoints(point_array)
    i = 0
    while i < point_array.length():
        point = point_array[i]
        file_object.write("v {0} {1} {2}\n".format(point.x, point.y, point.z))
        i += 1

    # Write UV coordinates.
    u_array = OpenMaya.MFloatArray()
    v_array = OpenMaya.MFloatArray()
    mesh.getUVs(u_array, v_array)
    i = 0
    while i < u_array.length():
        file_object.write("vt {0} {1}\n".format(u_array[i], v_array[i]))
        i += 1

    # Write normals.
    normal_array = OpenMaya.MFloatVectorArray()
    mesh.getNormals(normal_array, 2)    # 2 = object space
    i = 0
    while i < normal_array.length():
        normal = normal_array[i]
        file_object.write("vn {0} {1} {2}\n".format(normal.x, normal.y, normal.z))
        i += 1

    # iterate over polys
    while not iter_polys.isDone():
        file_object.write("f")

        i = 0
        while i < iter_polys.polygonVertexCount():
            # To get uv index we need to create an int pointer because the API is just wrappers for C++.
            util = OpenMaya.MScriptUtil()
            util.createFromInt(0)
            uv_pInt = util.asIntPtr()
            uv_index = OpenMaya.MScriptUtil()
            uv_index.createFromInt(0)
            iter_polys.getUVIndex(i, uv_pInt)

            file_object.write(" {0}/{1}/{2}".format(iter_polys.vertexIndex(i) + 1, uv_index.getInt(uv_pInt) + 1, iter_polys.normalIndex(i) + 1))

            i += 1

        file_object.write("\n")
        iter_polys.next()

    file_object.close()
