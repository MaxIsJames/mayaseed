   // Copyright (c) 2012 Jonathan Topf

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


// procedures for -callCustom folderPicker 

global proc AE_file_browse(string $attr){    
 rowLayout -nc 3;  
  text -label "Output directory";  
  textField  -fileName `getAttr $attr` LocationText;  
  symbolButton -image "navButtonBrowse.xpm" -c ("loadPopup(\"" + $attr + "\")");  
  setParent ..;  
   
}  
  
global proc AE_file_browse_repeat(string $attr){  
 textField  -e -fileName `getAttr $attr` LocationText;  
}

global proc loadPopup(string $attr){  
 string $loc[0] = `fileDialog2 -fm 3 -okc "save"`;  
   
 if ($loc[0] != ""){  
  setAttr -type "string" $attr $loc[0];  
  textField -e -fileName `getAttr $attr` LocationText;  
 }  
} 

// procedure for -callCustom render button
global proc AE_export_button(string $attr){
   button -label "Export scene" -width 200 -height 30 -bgc 0 0.6 0.8 -ebg false;
}

global proc AE_edit_export_button(string $attr){
}

// procedures for message option menus
global proc AE_custom_env_menu(string $attr){
   rowLayout -nc 3;
      text -label "Environment";
      optionMenu -width 200;
         menuItem -label "foo";
         menuItem -label "bar";
      button -label "  +  " -height 20;
}

global proc AE_edit_custom_env_menu(string $attr){
}


// procedures for camera option menu
global proc AE_custom_camera_menu_create(string $attr){

   // get actual node name
   string $nodeNameTokens[];
   tokenize $attr "." $nodeNameTokens;
   int $newStringLength = size($nodeNameTokens[0]);
   string $nodeName = `substring $nodeNameTokens[0] 1 $newStringLength`;
   print $nodeName;

   string $currentCameraConnection = `getConnectedNode($nodeName + ".camera")`;

   print "\n\n\n*********\n";
   print $currentCameraConnection;
   print "\n*********\n\n";

   string $customCameraMenuCommand = "setCameraConnection " + $nodeName;
   optionMenuGrp -label "Cameras" -cc $customCameraMenuCommand customCameraMenuItem;
   string $cameras[] = `ls -cameras`;
   menuItem -label "<none>";
   for ($item in $cameras){
        menuItem -label $item;         
   }
}
 
global proc AE_custom_camera_menu_edit(string $nodeName){
    deleteUI customCameraMenuItem;       
    AE_custom_camera_menu_create($nodeName);
}

global proc setCameraConnection(string $nodeName){
   string $newSelection = `optionMenuGrp -q -v customCameraMenuItem`;
   $newSelection = $newSelection + ".nodeState";
   string $cameraConnectionName = $nodeName + ".camera";
   string $currentCameraConnection = `getConnectedNode($nodeName + ".camera")`;
   if ($currentCameraConnection != ""){
      $currentCameraConnection = $currentCameraConnection + ".nodeState";
      disconnectAttr $currentCameraConnection $cameraConnectionName;
   }
   connectAttr $newSelection $cameraConnectionName;
}


// layout definition ---------------------------------------------------------
global proc AEms_renderSettingsTemplate(string $nodeName)
{
   editorTemplate -callCustom "AE_export_button" "AE_edit_export_button" "export";
   editorTemplate -beginScrollLayout;
      editorTemplate -beginLayout "Export settings" -collapse false;
         editorTemplate -callCustom "AE_file_browse" "AE_file_browse_repeat" "output_directory";
         editorTemplate -addControl "output_file";
      editorTemplate -endLayout;

      editorTemplate -beginLayout "Environment settings" -collapse true;
         editorTemplate -callCustom "AE_custom_env_menu" "AE_edit_custom_env_menu" "environment";
      editorTemplate -endLayout;

      editorTemplate -beginLayout "Camera settings" -collapse true;
         editorTemplate -addControl "export_all_cameras";
         editorTemplate -addSeparator;
         editorTemplate -addControl "export_all_cameras_as_thinlens";
      editorTemplate -endLayout;
      
      editorTemplate -beginLayout "Assembly settings" -collapse true;
         editorTemplate -addControl "interpret_sets_as_assemblies";
         editorTemplate -addSeparator;
         editorTemplate -addControl "double_sided_shading";
      editorTemplate -endLayout;

      editorTemplate -beginLayout "Output settings" -collapse true (uiRes("m_AElocatorTemplate.kLocatorAttributes"));
         editorTemplate -callCustom "AE_custom_camera_menu_create" "AE_custom_camera_menu_edit" "camera";
         editorTemplate -addControl "color_space";
      editorTemplate -endLayout;

      editorTemplate -beginLayout "Configuration settings" -collapse true;
         editorTemplate -addControl "export_custom_interactive_config";
         editorTemplate -addControl "interactive_lighting_engine";
         editorTemplate -addControl "interactive_min_samples";
         editorTemplate -addControl "interactive_max_samples";
         editorTemplate -addControl "interactive_max_ray_depth";
         editorTemplate -addControl "interactive_light_samples";
         editorTemplate -addSeparator;
         editorTemplate -addControl "export_custom_final_config";
         editorTemplate -addControl "final_lighting_engine";
         editorTemplate -addControl "final_min_samples";
         editorTemplate -addControl "final_max_samples";
         editorTemplate -addControl "final_max_ray_depth";
         editorTemplate -addControl "final_light_samples";
      editorTemplate -endLayout;


      AEdependNodeTemplate $nodeName; // add any base class attributes
      
      editorTemplate -addExtraControls; // add any other attributes
      //editorTemplate -suppress "attrbute";

   editorTemplate -endScrollLayout;
}